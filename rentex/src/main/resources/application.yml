server:
  port: 8080
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true

spring:
  application:
    name: rentex
<<<<<<< HEAD
  profiles:
    active: secret
=======

  config:
    import: optional:classpath:application-secret.properties,optional:file:./application-secret.properties
>>>>>>> origin/feature/rentaladd

  datasource:
    url: jdbc:mariadb://localhost:3307/rentex?characterEncoding=UTF-8&serverTimezone=Asia/Seoul
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.mariadb.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MariaDBDialect
    defer-datasource-initialization: true

  sql:
    init:
      mode: always
      schema-locations: classpath:init/rentex.sql
  
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - name
              - email
            client-name: Naver
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GMAIL_USERNAME}
    password: ${GMAIL_APP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  web:
    resources:
      static-locations:
        - classpath:/static/           # 정적 리소스 (빌드 시 포함된 기본 이미지)
        - file:${file.upload-dir}/     # 업로드 파일 (외부 경로)

<<<<<<< HEAD
# --- Spring 설정 바깥의 커스텀 설정 ---

app:
  frontend-url: http://localhost:3000

jwt:
  secret: ${JWT_SECRET_KEY}
  expiration-in-seconds: 3600
  access-token-expiration-in-seconds: 3600   # 1시간 (3600초)
  refresh-token-expiration-in-seconds: 1209600 # 2주 (1,209,600초)

logging:
  level:
    org.springframework.security: DEBUG
=======
  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 50MB

# ===================================
# ✅ 업로드 파일 저장 경로
# ===================================
file:
  upload-dir: ./uploads
  # 🟢 AWS 배포 시: /home/ubuntu/rentex/uploads 로 변경

# ===================================
# ✅ 프론트엔드 도메인 주소 (CORS 허용)
# ===================================
app:
  frontend-url: http://localhost:3000
  # 🟢 AWS 배포 시: https://rentex.site 같은 실제 프론트 주소로 변경

## 테스트
#  debug: true
#  logging:
#    level:
#      org.springframework.boot.context.config: TRACE
#      org.springframework.core.env: TRACE
#
>>>>>>> origin/feature/rentaladd
